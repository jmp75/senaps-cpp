/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * RolePost.h
 *
 * 
 */

#ifndef RolePost_H_
#define RolePost_H_


#include "../ModelBase.h"

#include "RolePost_permissions.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  RolePost
    : public ModelBase
{
public:
    RolePost();
    virtual ~RolePost();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RolePost members

    /// <summary>
    /// A string identifier for the role. If the identifier already exists then this will be treated as an update operation.  
    /// </summary>
    utility::string_t getId() const;
        void setId(utility::string_t value);
    /// <summary>
    /// This can be either \&quot;.OrganisationRole\&quot;, \&quot;.AdministrationRole\&quot; or \&quot;.GroupRole\&quot;
    /// </summary>
    utility::string_t getType() const;
        void setType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganisationid() const;
        void setOrganisationid(utility::string_t value);
    /// <summary>
    /// A list of permissions.
    /// </summary>
    std::vector<std::shared_ptr<RolePost_permissions>>& getPermissions();
        void setPermissions(std::vector<std::shared_ptr<RolePost_permissions>> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGroupid() const;
    bool groupidIsSet() const;
    void unsetGroupid();
    void setGroupid(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isImplied() const;
    bool impliedIsSet() const;
    void unsetImplied();
    void setImplied(bool value);

protected:
    utility::string_t m_Id;
        utility::string_t m_Type;
        utility::string_t m_Organisationid;
        std::vector<std::shared_ptr<RolePost_permissions>> m_Permissions;
        utility::string_t m_Groupid;
    bool m_GroupidIsSet;
    bool m_Implied;
    bool m_ImpliedIsSet;
};

}
}
}
}

#endif /* RolePost_H_ */
