/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ApiError__embedded.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ApiError__embedded::ApiError__embedded()
{
    m_UserIsSet = false;
    m_Status = 0.0;
    m_StatusIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

ApiError__embedded::~ApiError__embedded()
{
}

void ApiError__embedded::validate()
{
    // TODO: implement validation
}

web::json::value ApiError__embedded::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }

    return val;
}

void ApiError__embedded::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        if(!val[utility::conversions::to_string_t("user")].is_null())
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromJson(val[utility::conversions::to_string_t("user")]);
            setUser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("status")]));
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromJson(val[utility::conversions::to_string_t("message")]));
    }
}

void ApiError__embedded::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UserIsSet)
    {
        if (m_User.get())
        {
            m_User->toMultipart(multipart, utility::conversions::to_string_t("user."));
        }
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
        
    }
}

void ApiError__embedded::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("user")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user")))
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user."));
            setUser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("message"))));
    }
}

std::shared_ptr<User> ApiError__embedded::getUser() const
{
    return m_User;
}


void ApiError__embedded::setUser(std::shared_ptr<User> value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool ApiError__embedded::userIsSet() const
{
    return m_UserIsSet;
}

void ApiError__embedded::unsetUser()
{
    m_UserIsSet = false;
}

double ApiError__embedded::getStatus() const
{
    return m_Status;
}


void ApiError__embedded::setStatus(double value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool ApiError__embedded::statusIsSet() const
{
    return m_StatusIsSet;
}

void ApiError__embedded::unsetStatus()
{
    m_StatusIsSet = false;
}

utility::string_t ApiError__embedded::getMessage() const
{
    return m_Message;
}


void ApiError__embedded::setMessage(utility::string_t value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool ApiError__embedded::messageIsSet() const
{
    return m_MessageIsSet;
}

void ApiError__embedded::unsetMessage()
{
    m_MessageIsSet = false;
}

}
}
}
}

