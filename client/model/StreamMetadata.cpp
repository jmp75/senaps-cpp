/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "StreamMetadata.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

StreamMetadata::StreamMetadata()
{
    m_Type = U("");
    m_ObservedProperty = U("");
    m_UnitOfMeasure = U("");
    m_InterpolationType = U("");
    m_Cummulative = false;
    m_CummulativeIsSet = false;
    m_AccumulationInterval = U("");
    m_AccumulationIntervalIsSet = false;
    m_AccumulationAnchor = U("");
    m_AccumulationAnchorIsSet = false;
    m_Timezone = U("");
    m_TimezoneIsSet = false;
}

StreamMetadata::~StreamMetadata()
{
}

void StreamMetadata::validate()
{
    // TODO: implement validation
}

web::json::value StreamMetadata::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("type")] = ModelBase::toJson(m_Type);
    val[U("observedProperty")] = ModelBase::toJson(m_ObservedProperty);
    val[U("unitOfMeasure")] = ModelBase::toJson(m_UnitOfMeasure);
    val[U("interpolationType")] = ModelBase::toJson(m_InterpolationType);
    if(m_CummulativeIsSet)
    {
        val[U("cummulative")] = ModelBase::toJson(m_Cummulative);
    }
    if(m_AccumulationIntervalIsSet)
    {
        val[U("accumulationInterval")] = ModelBase::toJson(m_AccumulationInterval);
    }
    if(m_AccumulationAnchorIsSet)
    {
        val[U("accumulationAnchor")] = ModelBase::toJson(m_AccumulationAnchor);
    }
    if(m_TimezoneIsSet)
    {
        val[U("timezone")] = ModelBase::toJson(m_Timezone);
    }

    return val;
}

void StreamMetadata::fromJson(web::json::value& val)
{
    setType(ModelBase::stringFromJson(val[U("type")]));
    setObservedProperty(ModelBase::stringFromJson(val[U("observedProperty")]));
    setUnitOfMeasure(ModelBase::stringFromJson(val[U("unitOfMeasure")]));
    setInterpolationType(ModelBase::stringFromJson(val[U("interpolationType")]));
    if(val.has_field(U("cummulative")))
    {
        setCummulative(ModelBase::boolFromJson(val[U("cummulative")]));
    }
    if(val.has_field(U("accumulationInterval")))
    {
        setAccumulationInterval(ModelBase::stringFromJson(val[U("accumulationInterval")]));
    }
    if(val.has_field(U("accumulationAnchor")))
    {
        setAccumulationAnchor(ModelBase::stringFromJson(val[U("accumulationAnchor")]));
    }
    if(val.has_field(U("timezone")))
    {
        setTimezone(ModelBase::stringFromJson(val[U("timezone")]));
    }
}

void StreamMetadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("observedProperty"), m_ObservedProperty));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("unitOfMeasure"), m_UnitOfMeasure));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("interpolationType"), m_InterpolationType));
    if(m_CummulativeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cummulative"), m_Cummulative));
    }
    if(m_AccumulationIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accumulationInterval"), m_AccumulationInterval));
        
    }
    if(m_AccumulationAnchorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accumulationAnchor"), m_AccumulationAnchor));
        
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("timezone"), m_Timezone));
        
    }
}

void StreamMetadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    setObservedProperty(ModelBase::stringFromHttpContent(multipart->getContent(U("observedProperty"))));
    setUnitOfMeasure(ModelBase::stringFromHttpContent(multipart->getContent(U("unitOfMeasure"))));
    setInterpolationType(ModelBase::stringFromHttpContent(multipart->getContent(U("interpolationType"))));
    if(multipart->hasContent(U("cummulative")))
    {
        setCummulative(ModelBase::boolFromHttpContent(multipart->getContent(U("cummulative"))));
    }
    if(multipart->hasContent(U("accumulationInterval")))
    {
        setAccumulationInterval(ModelBase::stringFromHttpContent(multipart->getContent(U("accumulationInterval"))));
    }
    if(multipart->hasContent(U("accumulationAnchor")))
    {
        setAccumulationAnchor(ModelBase::stringFromHttpContent(multipart->getContent(U("accumulationAnchor"))));
    }
    if(multipart->hasContent(U("timezone")))
    {
        setTimezone(ModelBase::stringFromHttpContent(multipart->getContent(U("timezone"))));
    }
}

utility::string_t StreamMetadata::getType() const
{
    return m_Type;
}


void StreamMetadata::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t StreamMetadata::getObservedProperty() const
{
    return m_ObservedProperty;
}


void StreamMetadata::setObservedProperty(utility::string_t value)
{
    m_ObservedProperty = value;
    
}
utility::string_t StreamMetadata::getUnitOfMeasure() const
{
    return m_UnitOfMeasure;
}


void StreamMetadata::setUnitOfMeasure(utility::string_t value)
{
    m_UnitOfMeasure = value;
    
}
utility::string_t StreamMetadata::getInterpolationType() const
{
    return m_InterpolationType;
}


void StreamMetadata::setInterpolationType(utility::string_t value)
{
    m_InterpolationType = value;
    
}
bool StreamMetadata::isCummulative() const
{
    return m_Cummulative;
}


void StreamMetadata::setCummulative(bool value)
{
    m_Cummulative = value;
    m_CummulativeIsSet = true;
}
bool StreamMetadata::cummulativeIsSet() const
{
    return m_CummulativeIsSet;
}

void StreamMetadata::unsetCummulative()
{
    m_CummulativeIsSet = false;
}

utility::string_t StreamMetadata::getAccumulationInterval() const
{
    return m_AccumulationInterval;
}


void StreamMetadata::setAccumulationInterval(utility::string_t value)
{
    m_AccumulationInterval = value;
    m_AccumulationIntervalIsSet = true;
}
bool StreamMetadata::accumulationIntervalIsSet() const
{
    return m_AccumulationIntervalIsSet;
}

void StreamMetadata::unsetAccumulationInterval()
{
    m_AccumulationIntervalIsSet = false;
}

utility::string_t StreamMetadata::getAccumulationAnchor() const
{
    return m_AccumulationAnchor;
}


void StreamMetadata::setAccumulationAnchor(utility::string_t value)
{
    m_AccumulationAnchor = value;
    m_AccumulationAnchorIsSet = true;
}
bool StreamMetadata::accumulationAnchorIsSet() const
{
    return m_AccumulationAnchorIsSet;
}

void StreamMetadata::unsetAccumulationAnchor()
{
    m_AccumulationAnchorIsSet = false;
}

utility::string_t StreamMetadata::getTimezone() const
{
    return m_Timezone;
}


void StreamMetadata::setTimezone(utility::string_t value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}
bool StreamMetadata::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void StreamMetadata::unsetTimezone()
{
    m_TimezoneIsSet = false;
}

}
}
}
}

