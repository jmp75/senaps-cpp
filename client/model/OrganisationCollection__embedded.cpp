/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OrganisationCollection__embedded.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

OrganisationCollection__embedded::OrganisationCollection__embedded()
{
    m_OrganisationsIsSet = false;
}

OrganisationCollection__embedded::~OrganisationCollection__embedded()
{
}

void OrganisationCollection__embedded::validate()
{
    // TODO: implement validation
}

web::json::value OrganisationCollection__embedded::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Organisations )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("organisations")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void OrganisationCollection__embedded::fromJson(web::json::value& val)
{
    {
        m_Organisations.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("organisations")))
        {
        for( auto& item : val[U("organisations")].as_array() )
        {
            if(item.is_null())
            {
                m_Organisations.push_back( std::shared_ptr<Organisation>(nullptr) );
            }
            else
            {
                std::shared_ptr<Organisation> newItem(new Organisation());
                newItem->fromJson(item);
                m_Organisations.push_back( newItem );
            }
        }
        }
    }
}

void OrganisationCollection__embedded::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Organisations )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("organisations"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void OrganisationCollection__embedded::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Organisations.clear();
        if(multipart->hasContent(U("organisations")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("organisations"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Organisations.push_back( std::shared_ptr<Organisation>(nullptr) );
            }
            else
            {
                std::shared_ptr<Organisation> newItem(new Organisation());
                newItem->fromJson(item);
                m_Organisations.push_back( newItem );
            }
        }
        }
    }
}

std::vector<std::shared_ptr<Organisation>>& OrganisationCollection__embedded::getOrganisations()
{
    return m_Organisations;
}

void OrganisationCollection__embedded::setOrganisations(std::vector<std::shared_ptr<Organisation>> value)
{
    m_Organisations = value;
    m_OrganisationsIsSet = true;
}
bool OrganisationCollection__embedded::organisationsIsSet() const
{
    return m_OrganisationsIsSet;
}

void OrganisationCollection__embedded::unsetOrganisations()
{
    m_OrganisationsIsSet = false;
}

}
}
}
}

