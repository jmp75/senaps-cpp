/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ApiError.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ApiError::ApiError()
{
    m__embeddedIsSet = false;
}

ApiError::~ApiError()
{
}

void ApiError::validate()
{
    // TODO: implement validation
}

web::json::value ApiError::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__embeddedIsSet)
    {
        val[U("_embedded")] = ModelBase::toJson(m__embedded);
    }

    return val;
}

void ApiError::fromJson(web::json::value& val)
{
    if(val.has_field(U("_embedded")))
    {
        if(!val[U("_embedded")].is_null())
        {
            std::shared_ptr<ApiError__embedded> newItem(new ApiError__embedded());
            newItem->fromJson(val[U("_embedded")]);
            setEmbedded( newItem );
        }
    }
}

void ApiError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__embeddedIsSet)
    {
        if (m__embedded.get())
        {
            m__embedded->toMultipart(multipart, U("_embedded."));
        }
        
    }
}

void ApiError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_embedded")))
    {
        if(multipart->hasContent(U("_embedded")))
        {
            std::shared_ptr<ApiError__embedded> newItem(new ApiError__embedded());
            newItem->fromMultiPart(multipart, U("_embedded."));
            setEmbedded( newItem );
        }
    }
}

std::shared_ptr<ApiError__embedded> ApiError::getEmbedded() const
{
    return m__embedded;
}


void ApiError::setEmbedded(std::shared_ptr<ApiError__embedded> value)
{
    m__embedded = value;
    m__embeddedIsSet = true;
}
bool ApiError::embeddedIsSet() const
{
    return m__embeddedIsSet;
}

void ApiError::unset_embedded()
{
    m__embeddedIsSet = false;
}

}
}
}
}

