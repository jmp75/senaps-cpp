/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Organisation__links.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Organisation__links::Organisation__links()
{
    m_SelfIsSet = false;
}

Organisation__links::~Organisation__links()
{
}

void Organisation__links::validate()
{
    // TODO: implement validation
}

web::json::value Organisation__links::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SelfIsSet)
    {
        val[U("self")] = ModelBase::toJson(m_Self);
    }

    return val;
}

void Organisation__links::fromJson(web::json::value& val)
{
    if(val.has_field(U("self")))
    {
        if(!val[U("self")].is_null())
        {
            std::shared_ptr<Organisation__links_self> newItem(new Organisation__links_self());
            newItem->fromJson(val[U("self")]);
            setSelf( newItem );
        }
    }
}

void Organisation__links::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_SelfIsSet)
    {
        if (m_Self.get())
        {
            m_Self->toMultipart(multipart, U("self."));
        }
        
    }
}

void Organisation__links::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("self")))
    {
        if(multipart->hasContent(U("self")))
        {
            std::shared_ptr<Organisation__links_self> newItem(new Organisation__links_self());
            newItem->fromMultiPart(multipart, U("self."));
            setSelf( newItem );
        }
    }
}

std::shared_ptr<Organisation__links_self> Organisation__links::getSelf() const
{
    return m_Self;
}


void Organisation__links::setSelf(std::shared_ptr<Organisation__links_self> value)
{
    m_Self = value;
    m_SelfIsSet = true;
}
bool Organisation__links::selfIsSet() const
{
    return m_SelfIsSet;
}

void Organisation__links::unsetSelf()
{
    m_SelfIsSet = false;
}

}
}
}
}

