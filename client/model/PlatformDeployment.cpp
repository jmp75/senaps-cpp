/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PlatformDeployment.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PlatformDeployment::PlatformDeployment()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ValidTimeIsSet = false;
    m_Locationid = utility::conversions::to_string_t("");
    m_LocationidIsSet = false;
    m_Streamid = utility::conversions::to_string_t("");
    m_StreamidIsSet = false;
}

PlatformDeployment::~PlatformDeployment()
{
}

void PlatformDeployment::validate()
{
    // TODO: implement validation
}

web::json::value PlatformDeployment::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ValidTimeIsSet)
    {
        val[utility::conversions::to_string_t("validTime")] = ModelBase::toJson(m_ValidTime);
    }
    if(m_LocationidIsSet)
    {
        val[utility::conversions::to_string_t("locationid")] = ModelBase::toJson(m_Locationid);
    }
    if(m_StreamidIsSet)
    {
        val[utility::conversions::to_string_t("streamid")] = ModelBase::toJson(m_Streamid);
    }

    return val;
}

void PlatformDeployment::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    }
    if(val.has_field(utility::conversions::to_string_t("validTime")))
    {
        if(!val[utility::conversions::to_string_t("validTime")].is_null())
        {
            std::shared_ptr<PlatformDeployment_validTime> newItem(new PlatformDeployment_validTime());
            newItem->fromJson(val[utility::conversions::to_string_t("validTime")]);
            setValidTime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locationid")))
    {
        setLocationid(ModelBase::stringFromJson(val[utility::conversions::to_string_t("locationid")]));
    }
    if(val.has_field(utility::conversions::to_string_t("streamid")))
    {
        setStreamid(ModelBase::stringFromJson(val[utility::conversions::to_string_t("streamid")]));
    }
}

void PlatformDeployment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
    if(m_ValidTimeIsSet)
    {
        if (m_ValidTime.get())
        {
            m_ValidTime->toMultipart(multipart, utility::conversions::to_string_t("validTime."));
        }
        
    }
    if(m_LocationidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationid"), m_Locationid));
        
    }
    if(m_StreamidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("streamid"), m_Streamid));
        
    }
}

void PlatformDeployment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("validTime")))
        {
            std::shared_ptr<PlatformDeployment_validTime> newItem(new PlatformDeployment_validTime());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("validTime."));
            setValidTime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationid")))
    {
        setLocationid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("streamid")))
    {
        setStreamid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("streamid"))));
    }
}

utility::string_t PlatformDeployment::getName() const
{
    return m_Name;
}


void PlatformDeployment::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool PlatformDeployment::nameIsSet() const
{
    return m_NameIsSet;
}

void PlatformDeployment::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<PlatformDeployment_validTime> PlatformDeployment::getValidTime() const
{
    return m_ValidTime;
}


void PlatformDeployment::setValidTime(std::shared_ptr<PlatformDeployment_validTime> value)
{
    m_ValidTime = value;
    m_ValidTimeIsSet = true;
}
bool PlatformDeployment::validTimeIsSet() const
{
    return m_ValidTimeIsSet;
}

void PlatformDeployment::unsetValidTime()
{
    m_ValidTimeIsSet = false;
}

utility::string_t PlatformDeployment::getLocationid() const
{
    return m_Locationid;
}


void PlatformDeployment::setLocationid(utility::string_t value)
{
    m_Locationid = value;
    m_LocationidIsSet = true;
}
bool PlatformDeployment::locationidIsSet() const
{
    return m_LocationidIsSet;
}

void PlatformDeployment::unsetLocationid()
{
    m_LocationidIsSet = false;
}

utility::string_t PlatformDeployment::getStreamid() const
{
    return m_Streamid;
}


void PlatformDeployment::setStreamid(utility::string_t value)
{
    m_Streamid = value;
    m_StreamidIsSet = true;
}
bool PlatformDeployment::streamidIsSet() const
{
    return m_StreamidIsSet;
}

void PlatformDeployment::unsetStreamid()
{
    m_StreamidIsSet = false;
}

}
}
}
}

