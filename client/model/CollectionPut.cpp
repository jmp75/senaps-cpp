/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CollectionPut.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CollectionPut::CollectionPut()
{
    m_Id = utility::conversions::to_string_t("");
    m_Name = utility::conversions::to_string_t("");
    m_Organisationid = utility::conversions::to_string_t("");
    m_GroupidsIsSet = false;
    m__public = false;
    m__publicIsSet = false;
}

CollectionPut::~CollectionPut()
{
}

void CollectionPut::validate()
{
    // TODO: implement validation
}

web::json::value CollectionPut::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("organisationid")] = ModelBase::toJson(m_Organisationid);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Groupids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("groupids")] = web::json::value::array(jsonArray);
        }
    }
    if(m__publicIsSet)
    {
        val[utility::conversions::to_string_t("public")] = ModelBase::toJson(m__public);
    }

    return val;
}

void CollectionPut::fromJson(web::json::value& val)
{
    setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setOrganisationid(ModelBase::stringFromJson(val[utility::conversions::to_string_t("organisationid")]));
    {
        m_Groupids.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("groupids")))
        {
        for( auto& item : val[utility::conversions::to_string_t("groupids")].as_array() )
        {
            m_Groupids.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("public")))
    {
        setPublic(ModelBase::boolFromJson(val[utility::conversions::to_string_t("public")]));
    }
}

void CollectionPut::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("organisationid"), m_Organisationid));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Groupids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupids"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m__publicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("public"), m__public));
    }
}

void CollectionPut::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setOrganisationid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("organisationid"))));
    {
        m_Groupids.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("groupids")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupids"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Groupids.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("public")))
    {
        setPublic(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("public"))));
    }
}

utility::string_t CollectionPut::getId() const
{
    return m_Id;
}


void CollectionPut::setId(utility::string_t value)
{
    m_Id = value;
    
}
utility::string_t CollectionPut::getName() const
{
    return m_Name;
}


void CollectionPut::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t CollectionPut::getOrganisationid() const
{
    return m_Organisationid;
}


void CollectionPut::setOrganisationid(utility::string_t value)
{
    m_Organisationid = value;
    
}
std::vector<utility::string_t>& CollectionPut::getGroupids()
{
    return m_Groupids;
}

void CollectionPut::setGroupids(std::vector<utility::string_t> value)
{
    m_Groupids = value;
    m_GroupidsIsSet = true;
}
bool CollectionPut::groupidsIsSet() const
{
    return m_GroupidsIsSet;
}

void CollectionPut::unsetGroupids()
{
    m_GroupidsIsSet = false;
}

bool CollectionPut::isPublic() const
{
    return m__public;
}


void CollectionPut::setPublic(bool value)
{
    m__public = value;
    m__publicIsSet = true;
}
bool CollectionPut::publicIsSet() const
{
    return m__publicIsSet;
}

void CollectionPut::unset_public()
{
    m__publicIsSet = false;
}

}
}
}
}

