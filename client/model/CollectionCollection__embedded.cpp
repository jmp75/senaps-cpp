/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CollectionCollection__embedded.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CollectionCollection__embedded::CollectionCollection__embedded()
{
    m_CollectionsIsSet = false;
}

CollectionCollection__embedded::~CollectionCollection__embedded()
{
}

void CollectionCollection__embedded::validate()
{
    // TODO: implement validation
}

web::json::value CollectionCollection__embedded::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Collections )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("collections")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void CollectionCollection__embedded::fromJson(web::json::value& val)
{
    {
        m_Collections.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("collections")))
        {
        for( auto& item : val[utility::conversions::to_string_t("collections")].as_array() )
        {
            if(item.is_null())
            {
                m_Collections.push_back( std::shared_ptr<PlatformCollection__embedded_platforms>(nullptr) );
            }
            else
            {
                std::shared_ptr<PlatformCollection__embedded_platforms> newItem(new PlatformCollection__embedded_platforms());
                newItem->fromJson(item);
                m_Collections.push_back( newItem );
            }
        }
        }
    }
}

void CollectionCollection__embedded::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Collections )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collections"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void CollectionCollection__embedded::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Collections.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("collections")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("collections"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Collections.push_back( std::shared_ptr<PlatformCollection__embedded_platforms>(nullptr) );
            }
            else
            {
                std::shared_ptr<PlatformCollection__embedded_platforms> newItem(new PlatformCollection__embedded_platforms());
                newItem->fromJson(item);
                m_Collections.push_back( newItem );
            }
        }
        }
    }
}

std::vector<std::shared_ptr<PlatformCollection__embedded_platforms>>& CollectionCollection__embedded::getCollections()
{
    return m_Collections;
}

void CollectionCollection__embedded::setCollections(std::vector<std::shared_ptr<PlatformCollection__embedded_platforms>> value)
{
    m_Collections = value;
    m_CollectionsIsSet = true;
}
bool CollectionCollection__embedded::collectionsIsSet() const
{
    return m_CollectionsIsSet;
}

void CollectionCollection__embedded::unsetCollections()
{
    m_CollectionsIsSet = false;
}

}
}
}
}

