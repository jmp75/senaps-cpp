/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * InvitationPost.h
 *
 * 
 */

#ifndef InvitationPost_H_
#define InvitationPost_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  InvitationPost
    : public ModelBase
{
public:
    InvitationPost();
    virtual ~InvitationPost();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InvitationPost members

    /// <summary>
    /// The user id of the user to invite.  This must be a valid email address.
    /// </summary>
    utility::string_t getUserid() const;
    bool useridIsSet() const;
    void unsetUserid();
    void setUserid(utility::string_t value);
    /// <summary>
    /// The organisation the user is being invited to.
    /// </summary>
    utility::string_t getOrganisationid() const;
    bool organisationidIsSet() const;
    void unsetOrganisationid();
    void setOrganisationid(utility::string_t value);
    /// <summary>
    /// The roles the user will be assigned once the invitation has been accepted.
    /// </summary>
    std::vector<utility::string_t>& getRoleids();
    bool roleidsIsSet() const;
    void unsetRoleids();
    void setRoleids(std::vector<utility::string_t> value);

protected:
    utility::string_t m_Userid;
    bool m_UseridIsSet;
    utility::string_t m_Organisationid;
    bool m_OrganisationidIsSet;
    std::vector<utility::string_t> m_Roleids;
    bool m_RoleidsIsSet;
};

}
}
}
}

#endif /* InvitationPost_H_ */
