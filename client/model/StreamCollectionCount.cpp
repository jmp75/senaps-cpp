/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "StreamCollectionCount.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

StreamCollectionCount::StreamCollectionCount()
{
    m__linksIsSet = false;
    m_Count = 0.0;
    m_CountIsSet = false;
}

StreamCollectionCount::~StreamCollectionCount()
{
}

void StreamCollectionCount::validate()
{
    // TODO: implement validation
}

web::json::value StreamCollectionCount::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__linksIsSet)
    {
        val[U("_links")] = ModelBase::toJson(m__links);
    }
    if(m_CountIsSet)
    {
        val[U("count")] = ModelBase::toJson(m_Count);
    }

    return val;
}

void StreamCollectionCount::fromJson(web::json::value& val)
{
    if(val.has_field(U("_links")))
    {
        if(!val[U("_links")].is_null())
        {
            std::shared_ptr<Organisation__links> newItem(new Organisation__links());
            newItem->fromJson(val[U("_links")]);
            setLinks( newItem );
        }
    }
    if(val.has_field(U("count")))
    {
        setCount(ModelBase::doubleFromJson(val[U("count")]));
    }
}

void StreamCollectionCount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, U("_links."));
        }
        
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("count"), m_Count));
    }
}

void StreamCollectionCount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_links")))
    {
        if(multipart->hasContent(U("_links")))
        {
            std::shared_ptr<Organisation__links> newItem(new Organisation__links());
            newItem->fromMultiPart(multipart, U("_links."));
            setLinks( newItem );
        }
    }
    if(multipart->hasContent(U("count")))
    {
        setCount(ModelBase::doubleFromHttpContent(multipart->getContent(U("count"))));
    }
}

std::shared_ptr<Organisation__links> StreamCollectionCount::getLinks() const
{
    return m__links;
}


void StreamCollectionCount::setLinks(std::shared_ptr<Organisation__links> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool StreamCollectionCount::linksIsSet() const
{
    return m__linksIsSet;
}

void StreamCollectionCount::unset_links()
{
    m__linksIsSet = false;
}

double StreamCollectionCount::getCount() const
{
    return m_Count;
}


void StreamCollectionCount::setCount(double value)
{
    m_Count = value;
    m_CountIsSet = true;
}
bool StreamCollectionCount::countIsSet() const
{
    return m_CountIsSet;
}

void StreamCollectionCount::unsetCount()
{
    m_CountIsSet = false;
}

}
}
}
}

