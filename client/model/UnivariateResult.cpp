/**
 * Sensor Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UnivariateResult.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UnivariateResult::UnivariateResult()
{
    m_t = utility::conversions::to_string_t("");
    m_tIsSet = false;
    m_vIsSet = false;
}

UnivariateResult::~UnivariateResult()
{
}

void UnivariateResult::validate()
{
    // TODO: implement validation
}

web::json::value UnivariateResult::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_tIsSet)
    {
        val[utility::conversions::to_string_t("t")] = ModelBase::toJson(m_t);
    }
    if(m_vIsSet)
    {
        val[utility::conversions::to_string_t("v")] = ModelBase::toJson(m_v);
    }

    return val;
}

void UnivariateResult::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("t")))
    {
        setT(ModelBase::stringFromJson(val[utility::conversions::to_string_t("t")]));
    }
    if(val.has_field(utility::conversions::to_string_t("v")))
    {
        if(!val[utility::conversions::to_string_t("v")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[utility::conversions::to_string_t("v")]);
            setV( newItem );
        }
    }
}

void UnivariateResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("t"), m_t));
        
    }
    if(m_vIsSet)
    {
        if (m_v.get())
        {
            m_v->toMultipart(multipart, utility::conversions::to_string_t("v."));
        }
        
    }
}

void UnivariateResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("t")))
    {
        setT(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("t"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("v")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("v")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("v."));
            setV( newItem );
        }
    }
}

utility::string_t UnivariateResult::getT() const
{
    return m_t;
}


void UnivariateResult::setT(utility::string_t value)
{
    m_t = value;
    m_tIsSet = true;
}
bool UnivariateResult::TIsSet() const
{
    return m_tIsSet;
}

void UnivariateResult::unsett()
{
    m_tIsSet = false;
}

std::shared_ptr<Object> UnivariateResult::getV() const
{
    return m_v;
}


void UnivariateResult::setV(std::shared_ptr<Object> value)
{
    m_v = value;
    m_vIsSet = true;
}
bool UnivariateResult::VIsSet() const
{
    return m_vIsSet;
}

void UnivariateResult::unsetv()
{
    m_vIsSet = false;
}

}
}
}
}

